// <auto-generated />
[assembly: Codeworx.Rest.RestProxy(typeof(global::Codeworx.Rest.UnitTests.Api.Contract.IMethodOverloadingController), typeof(Codeworx.Rest.UnitTests.Generated.MethodOverloadingControllerClient))]
namespace Codeworx.Rest.UnitTests.Generated
{
    public class MethodOverloadingControllerClient : Codeworx.Rest.Client.RestClient<global::Codeworx.Rest.UnitTests.Api.Contract.IMethodOverloadingController>, global::Codeworx.Rest.UnitTests.Api.Contract.IMethodOverloadingController
    {
        public MethodOverloadingControllerClient(Codeworx.Rest.Client.RestOptions<global::Codeworx.Rest.UnitTests.Api.Contract.IMethodOverloadingController> options) : base(options)
        {
        }

        public global::System.Threading.Tasks.Task<global::Codeworx.Rest.UnitTests.Model.Item> MethodWithSameUrl1()
        {
            return CallAsync(c => c.MethodWithSameUrl1());
        }

        public global::System.Threading.Tasks.Task<global::Codeworx.Rest.UnitTests.Model.Item> MethodWithSameUrl2()
        {
            return CallAsync(c => c.MethodWithSameUrl2());
        }

        public global::System.Threading.Tasks.Task<global::Codeworx.Rest.UnitTests.Model.Item> MethodWithSameName()
        {
            return CallAsync(c => c.MethodWithSameName());
        }

        public global::System.Threading.Tasks.Task<global::Codeworx.Rest.UnitTests.Model.Item> MethodWithSameName(string resultItemName)
        {
            return CallAsync(c => c.MethodWithSameName(resultItemName));
        }
    }
}